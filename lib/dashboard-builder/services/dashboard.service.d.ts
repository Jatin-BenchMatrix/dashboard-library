import { Observable } from 'rxjs';
import { DashboardState, WidgetConfig, GlobalFilters } from '../models/dashboard.layout';
import * as i0 from "@angular/core";
export declare class DashboardService {
    private stateSubject;
    private widgetsSubject;
    private filtersSubject;
    state$: Observable<DashboardState>;
    widgets$: Observable<WidgetConfig[]>;
    filters$: Observable<GlobalFilters>;
    mode$: Observable<"prebuilt" | "builder" | "library">;
    activeLayout$: Observable<string[]>;
    selectedWidget$: Observable<WidgetConfig | undefined>;
    isEditing$: Observable<boolean>;
    leftPanelOpen$: Observable<boolean>;
    showAddWidget$: Observable<boolean>;
    searchQuery$: Observable<string>;
    filteredTemplates$: Observable<import("dashboard-library").PrebuiltTemplate[]>;
    filteredWidgets$: Observable<import("dashboard-library").WidgetLibraryItem[]>;
    constructor();
    setMode(mode: 'prebuilt' | 'builder' | 'library'): void;
    setActiveLayout(layout: string[]): void;
    setSelectedWidget(widget: WidgetConfig | undefined): void;
    setIsEditing(editing: boolean): void;
    setLeftPanelOpen(open: boolean): void;
    setShowAddWidget(show: boolean): void;
    setSearchQuery(query: string): void;
    addWidget(widgetKey: string): void;
    removeWidget(widgetId: string): void;
    updateWidget(widgetId: string, updates: Partial<WidgetConfig>): void;
    duplicateWidget(widgetId: string): void;
    reorderWidgets(fromIndex: number, toIndex: number): void;
    applyTemplate(templateId: string): void;
    saveAsTemplate(name: string, description: string, tags: string[]): void;
    updateFilters(filters: Partial<GlobalFilters>): void;
    resetFilters(): void;
    getDataForDataset(datasetId: string): any[];
    private updateState;
    private initializeDefaultLayout;
    private loadTemplateWidgets;
    private updateActiveLayout;
    private calculatePosition;
    private calculateNextPosition;
    private generateWidgetId;
    private generateId;
    static ɵfac: i0.ɵɵFactoryDeclaration<DashboardService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<DashboardService>;
}
